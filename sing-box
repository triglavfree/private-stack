#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}Запустите от root.${NC}"
   exit 1
fi

create_swap_if_needed() {
    TOTAL_MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    TOTAL_MEM_GB=$((TOTAL_MEM_KB / 1024 / 1024))
    if [ "$TOTAL_MEM_GB" -le 1 ]; then
        if ! swapon --show | grep -q '/swapfile'; then
            echo -e "${GREEN}Создание swap-файла 2 ГБ (RAM ≤ 1 ГБ)...${NC}"
            fallocate -l 2G /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=2048
            chmod 600 /swapfile
            mkswap /swapfile
            swapon /swapfile
            echo '/swapfile none swap sw 0 0' >> /etc/fstab
            echo 'vm.swappiness=10' >> /etc/sysctl.conf
            echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf
            sysctl -p >/dev/null 2>&1
            echo -e "${GREEN}Swap создан.${NC}"
        fi
    fi
}

create_swap_if_needed

echo -e "${GREEN}Обновление системы...${NC}"
apt update && apt upgrade -y
apt install -y curl wget gnupg net-tools qrencode jq

# Установка sing-box
echo -e "${GREEN}Установка sing-box...${NC}"
LATEST=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r ".tag_name")
ARCH=$(dpkg --print-architecture)
case "$ARCH" in
  amd64) SUFFIX="linux-amd64" ;;
  arm64) SUFFIX="linux-arm64" ;;
  *) echo -e "${RED}Архитектура $ARCH не поддерживается.${NC}"; exit 1 ;;
esac

URL="https://github.com/SagerNet/sing-box/releases/download/${LATEST}/sing-box-${LATEST#v}-${SUFFIX}.tar.gz"
curl -L "$URL" | tar xz -C /tmp
mv "/tmp/sing-box-${LATEST#v}-${SUFFIX}/sing-box" /usr/local/bin/sing-box
rm -rf "/tmp/sing-box-${LATEST#v}-${SUFFIX}"
chmod +x /usr/local/bin/sing-box

# systemd
cat > /etc/systemd/system/sing-box.service <<'EOF'
[Unit]
Description=sing-box service
After=network.target

[Service]
ExecStart=/usr/local/bin/sing-box run -c /usr/local/etc/sing-box/config.json
Restart=on-failure
RestartSec=5
User=root

[Install]
WantedBy=multi-user.target
EOF

IP=$(curl -4 -s icanhazip.com)
UUID=$(uuidgen)
REALITY_PRIV_KEY=$(sing-box x25519 | awk '/Private key/ {print $3}')
REALITY_PUB_KEY=$(sing-box x25519 | awk '/Public key/ {print $3}')
SHORT_ID=$(openssl rand -hex 4)

mkdir -p /usr/local/etc/sing-box
cat > /usr/local/etc/sing-box/.keys <<EOF
uuid: $UUID
Private key: $REALITY_PRIV_KEY
Password: $REALITY_PUB_KEY
shortsid: $SHORT_ID
EOF

cat > /usr/local/etc/sing-box/config.json <<EOF
{
  "log": {
    "level": "warn"
  },
  "dns": {
    "servers": [
      {
        "tag": "doh-cznic",
        "address": "https://doh.nic.cz/dns-query"
      }
    ]
  },
  "inbounds": [
    {
      "type": "vless",
      "listen": "::",
      "listen_port": 443,
      "users": [
        {
          "uuid": "$UUID",
          "flow": "xtls-rprx-vision"
        }
      ],
      "tls": {
        "enabled": true,
        "server_name": "icloud.com",
        "reality": {
          "enabled": true,
          "private_key": "$REALITY_PRIV_KEY",
          "short_ids": ["$SHORT_ID"]
        }
      },
      "transport": {
        "type": "tcp"
      }
    }
  ],
  "outbounds": [
    {
      "type": "direct",
      "tag": "direct",
      "domain_strategy": "prefer_ipv4",
      "detour": "dns-out"
    },
    {
      "type": "dns",
      "tag": "dns-out"
    }
  ],
  "route": {
    "rules": [
      {
        "protocol": "dns",
        "outbound": "dns-out"
      }
    ],
    "final": "direct"
  }
}
EOF

systemctl daemon-reload
systemctl enable --now sing-box

# Утилиты
cat > /usr/local/bin/listuser <<'EOF'
#!/bin/bash
uuids=($(jq -r '.inbounds[0].users[].uuid' "/usr/local/etc/sing-box/config.json"))
if [[ ${#uuids[@]} -eq 0 ]]; then
    echo "Список клиентов пуст"
    exit 1
fi
echo "Клиенты (по UUID):"
for i in "${!uuids[@]}"; do
    echo "$((i+1)). ${uuids[$i]}"
done
EOF
chmod +x /usr/local/bin/listuser

cat > /usr/local/bin/mainuser <<EOF
#!/bin/bash
uuid=\$(awk -F': ' '/uuid/ {print \$2}' /usr/local/etc/sing-box/.keys)
pbk=\$(awk -F': ' '/Password/ {print \$2}' /usr/local/etc/sing-box/.keys)
sid=\$(awk -F': ' '/shortsid/ {print \$2}' /usr/local/etc/sing-box/.keys)
ip=\$(curl -4 -s icanhazip.com)
link="vless://\$uuid@\$ip:443?security=reality&sni=icloud.com&fp=firefox&pbk=\$pbk&sid=\$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#vless-\$ip"
echo "\$link"
EOF
chmod +x /usr/local/bin/mainuser

cat > /usr/local/bin/newuser <<'EOF'
#!/bin/bash
read -p "Email (для метки): " email
if [[ -z "$email" ]]; then echo "Email не может быть пустым"; exit 1; fi
uuid=$(uuidgen)
jq --arg u "$uuid" '.inbounds[0].users += [{"uuid": $u, "flow": "xtls-rprx-vision"}]' /usr/local/etc/sing-box/config.json > /tmp/x.json && mv /tmp/x.json /usr/local/etc/sing-box/config.json
systemctl restart sing-box
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/sing-box/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/sing-box/.keys)
ip=$(curl -4 -s icanhazip.com)
link="vless://$uuid@$ip:443?security=reality&sni=icloud.com&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$email"
echo
echo "Ссылка:"
echo "$link"
echo
echo "QR:"
echo "$link" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/newuser

cat > /usr/local/bin/rmuser <<'EOF'
#!/bin/bash
uuids=($(jq -r '.inbounds[0].users[].uuid' "/usr/local/etc/sing-box/config.json"))
if [[ ${#uuids[@]} -eq 0 ]]; then echo "Нет клиентов"; exit 1; fi
for i in "${!uuids[@]}"; do echo "$((i+1)). ${uuids[$i]}"; done
read -p "Номер для удаления: " n
if ! [[ "$n" =~ ^[0-9]+$ ]] || (( n < 1 || n > ${#uuids[@]} )); then echo "Ошибка"; exit 1; fi
# Удаляем по индексу
jq --argjson idx $((n-1)) '(.inbounds[0].users) |= del(.[\$idx])' /usr/local/etc/sing-box/config.json > /tmp/x.json && mv /tmp/x.json /usr/local/etc/sing-box/config.json
systemctl restart sing-box
echo "Клиент удалён."
EOF
chmod +x /usr/local/bin/rmuser

cat > /usr/local/bin/sharelink <<'EOF'
#!/bin/bash
uuids=($(jq -r '.inbounds[0].users[].uuid' "/usr/local/etc/sing-box/config.json"))
if [[ ${#uuids[@]} -eq 0 ]]; then echo "Нет клиентов"; exit 1; fi
for i in "${!uuids[@]}"; do echo "$((i+1)). ${uuids[$i]}"; done
read -p "Выбор: " n
if ! [[ "$n" =~ ^[0-9]+$ ]] || (( n < 1 || n > ${#uuids[@]} )); then echo "Ошибка"; exit 1; fi
uuid="${uuids[$((n-1))]}"
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/sing-box/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/sing-box/.keys)
ip=$(curl -4 -s icanhazip.com)
link="vless://$uuid@$ip:443?security=reality&sni=icloud.com&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#user-$n"
echo
echo "Ссылка:"
echo "$link"
echo
echo "QR:"
echo "$link" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/sharelink

cat > /usr/local/bin/update <<'EOF'
#!/bin/bash
echo "Обновление sing-box..."
LATEST=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r ".tag_name")
ARCH=$(dpkg --print-architecture)
case "$ARCH" in
  amd64) SUFFIX="linux-amd64" ;;
  arm64) SUFFIX="linux-arm64" ;;
  *) echo "Архитектура не поддерживается"; exit 1 ;;
esac
URL="https://github.com/SagerNet/sing-box/releases/download/${LATEST}/sing-box-${LATEST#v}-${SUFFIX}.tar.gz"
curl -L "$URL" | tar xz -C /tmp
mv "/tmp/sing-box-${LATEST#v}-${SUFFIX}/sing-box" /usr/local/bin/sing-box
rm -rf "/tmp/sing-box-${LATEST#v}-${SUFFIX}"
chmod +x /usr/local/bin/sing-box
systemctl restart sing-box
echo "Готово."
EOF
chmod +x /usr/local/bin/update

cat > $HOME/help <<'EOF'
Доступные команды:
  mainuser    — показать ссылку и QR основного пользователя
  listuser    — список всех клиентов
  newuser     — создать нового пользователя
  rmuser      — удалить пользователя
  sharelink   — получить ссылку по номеру
  update      — обновить ядро
EOF

LINK=$(mainuser)
clear

echo -e "${GREEN}✅ Установка sing-box (REALITY + Vision) завершена!${NC}"
echo
echo "Ссылка для подключения:"
echo "$LINK"
echo
echo "QR-код:"
echo "$LINK" | qrencode -t ansiutf8
echo
echo "Доступные команды"
echo "cat help"
echo -e "${YELLOW}💡 Включите «Use Remote DNS» в клиенте (Hiddify и др.).${NC}"
echo -e "${YELLOW}Проверка утечек: https://dnsleaktest.com${NC}"
