#!/bin/bash
set -e

# Цвета
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Проверка root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}Запустите от root.${NC}"
   exit 1
fi

# Создание swap при необходимости
create_swap_if_needed() {
    TOTAL_MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    TOTAL_MEM_GB=$((TOTAL_MEM_KB / 1024 / 1024))
    if [ "$TOTAL_MEM_GB" -le 1 ]; then
        if ! swapon --show | grep -q '/swapfile'; then
            echo -e "${GREEN}Создание swap-файла 2 ГБ (RAM ≤ 1 ГБ)...${NC}"
            fallocate -l 2G /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=2048
            chmod 600 /swapfile
            mkswap /swapfile
            swapon /swapfile
            echo '/swapfile none swap sw 0 0' >> /etc/fstab
            echo 'vm.swappiness=10' >> /etc/sysctl.conf
            echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf
            sysctl -p >/dev/null 2>&1
            echo -e "${GREEN}Swap создан.${NC}"
        fi
    fi
}
create_swap_if_needed

# Обновление системы и установка зависимостей
echo -e "${GREEN}Обновление системы...${NC}"
apt update && apt upgrade -y
apt install -y curl wget gnupg net-tools qrencode jq

# Установка Xray
echo -e "${GREEN}Установка Xray-core...${NC}"
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install

# Проверка, что xray установлен и работает
if ! command -v xray &> /dev/null; then
    echo -e "${RED}Ошибка: xray не установлен или не в PATH.${NC}"
    exit 1
fi

if ! xray version &> /dev/null; then
    echo -e "${RED}Ошибка: xray установлен, но не запускается.${NC}"
    exit 1
fi

# Получение публичного IP
IP=$(curl -4 -s icanhazip.com)

# Генерация UUID и ключей (ОДИН раз!)
UUID=$(xray uuid)
KEYPAIR=$(xray x25519)
REALITY_PRIV_KEY=$(echo "$KEYPAIR" | awk '/^PrivateKey:/ {print $2}')
REALITY_PUB_KEY=$(echo "$KEYPAIR" | awk '/^Password:/ {print $2}')
SHORT_ID=$(openssl rand -hex 4)

# Сохранение ключей
mkdir -p /usr/local/etc/xray
cat > /usr/local/etc/xray/.keys <<EOF
uuid: $UUID
Private key: $REALITY_PRIV_KEY
Password: $REALITY_PUB_KEY
shortsid: $SHORT_ID
EOF

# Конфигурация с DoH Cloudflare
cat > /usr/local/etc/xray/config.json <<EOF
{
  "log": {
    "loglevel": "warning"
  },
  "dns": {
    "servers": [
      "https://1.1.1.1/dns-query"
    ],
    "tag": "doh-cloudflare"
  },
  "inbounds": [
    {
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          {
            "id": "$UUID",
            "email": "main@example.com",
            "flow": "xtls-rprx-vision"
          }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "icloud.com:443",
          "xver": 0,
          "serverNames": ["icloud.com"],
          "privateKey": "$REALITY_PRIV_KEY",
          "shortIds": ["$SHORT_ID"]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {},
      "tag": "direct",
      "streamSettings": {
        "sockopt": {
          "tcpKeepAliveIdle": 100,
          "tcpNoDelay": true
        }
      },
      "dnsSettings": {
        "server": "https://1.1.1.1/dns-query"
      }
    },
    {
      "protocol": "dns",
      "tag": "dns-out"
    }
  ],
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      {
        "type": "field",
        "port": "53",
        "outboundTag": "dns-out"
      }
    ]
  }
}
EOF

# Перезапуск службы
systemctl daemon-reload
systemctl enable --now xray

# Утилиты
cat > /usr/local/bin/listuser <<'EOF'
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' "/usr/local/etc/xray/config.json"))
if [[ ${#emails[@]} -eq 0 ]]; then
    echo "Список клиентов пуст"
    exit 1
fi
echo "Список клиентов:"
for i in "${!emails[@]}"; do
    echo "$((i+1)). ${emails[$i]}"
done
EOF
chmod +x /usr/local/bin/listuser

cat > /usr/local/bin/mainuser <<EOF
#!/bin/bash
protocol=\$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=\$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
uuid=\$(awk -F': ' '/uuid/ {print \$2}' /usr/local/etc/xray/.keys)
pbk=\$(awk -F': ' '/Password/ {print \$2}' /usr/local/etc/xray/.keys)
sid=\$(awk -F': ' '/shortsid/ {print \$2}' /usr/local/etc/xray/.keys)
sni=\$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' /usr/local/etc/xray/config.json)
ip=\$(curl -4 -s icanhazip.com)
link="\$protocol://\$uuid@\$ip:\$port?security=reality&sni=\$sni&fp=firefox&pbk=\$pbk&sid=\$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#vless-\$ip"
echo "\$link"
EOF
chmod +x /usr/local/bin/mainuser

cat > /usr/local/bin/newuser <<'EOF'
#!/bin/bash
read -p "Email: " email
if [[ -z "$email" || "$email" == *" "* ]]; then echo "Неверный email"; exit 1; fi
if jq -e --arg e "$email" '.inbounds[0].settings.clients[] | select(.email == $e)' /usr/local/etc/xray/config.json >/dev/null; then
    echo "Уже существует"; exit 1
fi
uuid=$(xray uuid)
jq --arg e "$email" --arg u "$uuid" '.inbounds[0].settings.clients += [{"email": $e, "id": $u, "flow": "xtls-rprx-vision"}]' /usr/local/etc/xray/config.json > /tmp/x.json && mv /tmp/x.json /usr/local/etc/xray/config.json
systemctl restart xray
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/xray/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/xray/.keys)
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' /usr/local/etc/xray/config.json)
ip=$(curl -4 -s icanhazip.com)
link="$protocol://$uuid@$ip:$port?security=reality&sni=$sni&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$email"
echo
echo "Ссылка:"
echo "$link"
echo
echo "QR:"
echo "$link" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/newuser

cat > /usr/local/bin/rmuser <<'EOF'
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' "/usr/local/etc/xray/config.json"))
if [[ ${#emails[@]} -eq 0 ]]; then echo "Нет клиентов"; exit 1; fi
for i in "${!emails[@]}"; do echo "$((i+1)). ${emails[$i]}"; done
read -p "Номер: " n
if ! [[ "$n" =~ ^[0-9]+$ ]] || (( n < 1 || n > ${#emails[@]} )); then echo "Ошибка"; exit 1; fi
e="${emails[$((n-1))]}"
jq --arg e "$e" '(.inbounds[0].settings.clients) |= map(select(.email != $e))' /usr/local/etc/xray/config.json > /tmp/x.json && mv /tmp/x.json /usr/local/etc/xray/config.json
systemctl restart xray
echo "Удалён: $e"
EOF
chmod +x /usr/local/bin/rmuser

cat > /usr/local/bin/sharelink <<'EOF'
#!/bin/bash
emails=($(jq -r '.inbounds[0].settings.clients[].email' "/usr/local/etc/xray/config.json"))
if [[ ${#emails[@]} -eq 0 ]]; then echo "Нет клиентов"; exit 1; fi
for i in "${!emails[@]}"; do echo "$((i+1)). ${emails[$i]}"; done
read -p "Выбор: " n
if ! [[ "$n" =~ ^[0-9]+$ ]] || (( n < 1 || n > ${#emails[@]} )); then echo "Ошибка"; exit 1; fi
email="${emails[$((n-1))]}"
uuid=$(jq --arg e "$email" 'first(.inbounds[0].settings.clients[] | select(.email == $e) | .id)' /usr/local/etc/xray/config.json)
protocol=$(jq -r '.inbounds[0].protocol' /usr/local/etc/xray/config.json)
port=$(jq -r '.inbounds[0].port' /usr/local/etc/xray/config.json)
pbk=$(awk -F': ' '/Password/ {print $2}' /usr/local/etc/xray/.keys)
sid=$(awk -F': ' '/shortsid/ {print $2}' /usr/local/etc/xray/.keys)
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' /usr/local/etc/xray/config.json)
ip=$(curl -4 -s icanhazip.com)
link="$protocol://$uuid@$ip:$port?security=reality&sni=$sni&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$email"
echo
echo "Ссылка:"
echo "$link"
echo
echo "QR:"
echo "$link" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/sharelink

cat > /usr/local/bin/update <<'EOF'
#!/bin/bash
echo "Обновление Xray..."
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install
systemctl restart xray
echo "Готово."
EOF
chmod +x /usr/local/bin/update

# Помощь
cat > $HOME/help <<'EOF'
Доступные команды:
  mainuser    — показать ссылку и QR основного пользователя
  listuser    — список всех клиентов
  newuser     — создать нового пользователя
  rmuser      — удалить пользователя
  sharelink   — получить ссылку по номеру
  update      — обновить ядро
EOF

# Финальный вывод
LINK=$(mainuser)
# clear  # закомментировано для отладки
echo -e "${GREEN}✅ Установка Xray (REALITY + Vision) завершена!${NC}"
echo
echo "Ссылка для подключения:"
echo "$LINK"
echo
echo "QR-код:"
echo "$LINK" | qrencode -t ansiutf8
echo
echo "Доступные команды:"
echo "cat help"
echo -e "${YELLOW}💡 Включите «Use Remote DNS» в клиенте (Hiddify и др.).${NC}"
echo -e "${YELLOW}Проверка утечек: https://dnsleaktest.com${NC}"
