#!/bin/bash
# install
# Private Stack v2.1: Xray (REALITY + Vision) + SearXNG + Vaultwarden
# Без Docker. Без Let's Encrypt. Без sslip.io. Работает на 1 ГБ RAM, Ubuntu 22.04/24.04

set -euo pipefail
exec > >(tee -a /var/log/privatestack_install.log) 2>&1

log() { echo -e "\033[0;32m[+]\033[0m $1"; }
error() { echo -e "\033[0;31m[-]\033[0m $1"; exit 1; }

if [[ "$(id -u)" -ne 0 ]]; then error "Запускайте от root"; fi
if ! grep -q "Ubuntu" /etc/os-release || ! grep -q "24.04\|22.04" /etc/os-release; then
    error "Требуется Ubuntu 22.04 или 24.04"
fi

# Удалить старый Xray, если есть
if command -v xray &>/dev/null; then
    log "Обнаружен старый Xray. Останавливаем и удаляем..."
    systemctl stop xray || true
    systemctl disable xray || true
    rm -f /usr/local/bin/xray
    rm -rf /usr/local/etc/xray /var/log/xray
fi

log "Установка пакетов..."
DEBIAN_FRONTEND=noninteractive apt-get update -qq
DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl git python3 python3-venv nginx-light ufw fail2ban jq qrencode ssl-cert

# Swap
if ! swapon -s | grep -q "/swapfile"; then
    log "Создание swap-файла (2 ГБ)..."
    fallocate -l 2G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo '/swapfile none swap sw 0 0' >> /etc/fstab
fi

# UFW + fail2ban
log "Настройка UFW и fail2ban..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp comment "SSH"
ufw allow 443/tcp comment "Xray REALITY (TCP)"
ufw allow 443/udp comment "Xray REALITY (UDP, Vision)"
ufw --force enable
systemctl enable --now fail2ban

# Xray
log "Установка Xray-core..."
bash -c "$(curl -4 -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install

# REALITY params
REALITY_UUID=$(xray uuid)
REALITY_KEYPAIR=($(xray x25519 | grep -v "Public key" | cut -d: -f2 | tr -d ' '))
REALITY_PRIVATE_KEY=${REALITY_KEYPAIR[0]}
REALITY_PUBLIC_KEY=${REALITY_KEYPAIR[1]}
REALITY_SHORT_ID=$(openssl rand -hex 4)

# Xray config (REALITY + Vision через gRPC)
mkdir -p /usr/local/etc/xray
cat > /usr/local/etc/xray/config.json <<EOF
{
  "log": { "loglevel": "warning" },
  "inbounds": [
    {
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [{ "id": "$REALITY_UUID" }],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "grpc",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "icloud.com:443",
          "xver": 0,
          "serverNames": ["icloud.com", "www.icloud.com"],
          "privateKey": "$REALITY_PRIVATE_KEY",
          "shortIds": ["$REALITY_SHORT_ID"]
        },
        "grpcSettings": {
          "serviceName": "random"
        }
      }
    }
  ],
  "outbounds": [{ "protocol": "freedom" }]
}
EOF

systemctl restart xray
log "✅ Xray (REALITY + Vision) запущен"

# SearXNG — ЧИСТАЯ УСТАНОВКА
log "Установка SearXNG (чистая)..."
rm -rf /opt/searxng
git clone https://github.com/searxng/searxng.git /opt/searxng
cd /opt/searxng || exit 1

# Установка uv
curl -LsSf https://astral.sh/uv/install.sh | sh
export PATH="$HOME/.local/bin:$PATH"

# Создание виртуального окружения
uv venv
source .venv/bin/activate

# Установка build-зависимостей
uv pip install pyyaml setuptools wheel msgspec

# Установка SearXNG без изоляции сборки
uv pip install --no-build-isolation -e .

# Создание директории и загрузка примера конфигурации
mkdir -p searxng
curl -sL https://raw.githubusercontent.com/searxng/searxng/master/searxng/settings.yml -o searxng/settings.yml

sed -i 's/json_output:.*/json_output: true/' searxng/settings.yml
sed -i 's|base_url:.*|base_url: http://127.0.0.1:8888|' searxng/settings.yml
sed -i 's|port:.*|port: 8888|' searxng/settings.yml
sed -i 's|bind_address:.*|bind_address: "127.0.0.1"|' searxng/settings.yml

# Только DuckDuckGo и WolframAlpha
sed -i '/^engines:/,/^[^-]/ { s/^\(-.*\)$/#\1/ }' searxng/settings.yml
cat >> searxng/settings.yml <<EOF

engines:
  - name: duckduckgo
    engine: duckduckgo
    shortcut: ddg
  - name: wolframalpha
    engine: wolframalpha
    shortcut: wa
    # app_id: YOUR_WOLFRAM_APP_ID
EOF

# Создание пользователя и systemd-юнит
if ! id searxng &>/dev/null; then
    useradd --system --shell /usr/sbin/nologin --home-dir /opt/searxng searxng
fi
chown -R searxng:searxng /opt/searxng

cat > /etc/systemd/system/searx.service <<EOF
[Unit]
Description=SearXNG meta-search engine
After=network.target

[Service]
User=searxng
Group=searxng
WorkingDirectory=/opt/searxng
ExecStart=/opt/searxng/.venv/bin/searxng
Environment=SEARXNG_SETTINGS_PATH=/opt/searxng/searxng/settings.yml
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now searx
log "✅ SearXNG запущен на http://127.0.0.1:8888"

# Nginx заглушка (публичный HTTPS)
log "Настройка Nginx с самоподписанным сертификатом..."
mkdir -p /etc/nginx/ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/nginx/ssl/nginx.key \
    -out /etc/nginx/ssl/nginx.crt \
    -subj "/C=XX/ST=State/L=City/O=Org/CN=localhost" >/dev/null 2>&1

echo "<h1>Secure Private Stack</h1>" > /var/www/html/index.html
cat > /etc/nginx/sites-available/default <<EOF
server {
    listen 80;
    listen 443 ssl http2;
    server_name _;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    root /var/www/html;
    index index.html;
}
EOF
nginx -t || { echo "❌ Ошибка в конфигурации Nginx"; exit 1; }
systemctl reload nginx

# Vaultwarden
log "Установка Vaultwarden..."
DATA_DIR="/var/lib/vaultwarden"
BIN_PATH="/usr/local/bin/vaultwarden"
USER="vaultwarden"

if ! id "$USER" &>/dev/null; then
  useradd --system --shell /usr/sbin/nologin --home-dir "$DATA_DIR" "$USER"
fi

ARCH=$(uname -m)
case "$ARCH" in
  x86_64)   BIN_URL="https://github.com/dani-garcia/vaultwarden/releases/latest/download/vaultwarden-linux-x64" ;;
  aarch64)  BIN_URL="https://github.com/dani-garcia/vaultwarden/releases/latest/download/vaultwarden-linux-arm64" ;;
  *)        error "Архитектура $ARCH не поддерживается" ;;
esac

mkdir -p "$DATA_DIR"
chown "$USER":"$USER" "$DATA_DIR"
curl -L "$BIN_URL" -o "$BIN_PATH"
chmod +x "$BIN_PATH"
chown root:root "$BIN_PATH"

ADMIN_TOKEN=$(openssl rand -hex 32)

cat > /etc/systemd/system/vaultwarden.service <<EOF
[Unit]
Description=Vaultwarden Server
After=network.target

[Service]
User=$USER
Group=$USER
WorkingDirectory=$DATA_DIR
ExecStart=$BIN_PATH
Environment=ROCKET_PORT=8080
Environment=ROCKET_ADDRESS=127.0.0.1
Environment=ROCKET_WORKERS=2
Environment=ADMIN_TOKEN=$ADMIN_TOKEN
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now vaultwarden
log "✅ Vaultwarden запущен на http://127.0.0.1:8080"

# cloudflared — только для Vaultwarden
log "Установка cloudflared..."
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" ]]; then
    DL_URL="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
elif [[ "$ARCH" == "aarch64" ]]; then
    DL_URL="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
else
    error "Архитектура $ARCH не поддерживается"
fi
curl -L "$DL_URL" -o /usr/local/bin/cloudflared
chmod +x /usr/local/bin/cloudflared

cat > /etc/systemd/system/cloudflared.service <<EOF
[Unit]
Description=Cloudflare Tunnel (Vaultwarden only)
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/cloudflared tunnel --no-autoupdate --url http://127.0.0.1:8080
Restart=always
RestartSec=10
User=root

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now cloudflared
sleep 15

VAULTWARDEN_URL=$(journalctl -u cloudflared -n 60 2>/dev/null | grep -o 'https://[a-z0-9-]*\.trycloudflare\.com' | head -1 || echo "не найден")

# Ссылки и QR
SERVER_IP=$(curl -4s ifconfig.me)

REALITY_LINK="vless://$REALITY_UUID@$SERVER_IP:443?encryption=none&security=reality&fp=safari&pbk=$REALITY_PUBLIC_KEY&sid=$REALITY_SHORT_ID&sni=icloud.com&type=grpc&serviceName=random&mode=multi&flow=xtls-rprx-vision#PrivateStack-Vision"

# mainuser
cat > /usr/local/bin/mainuser <<EOF
#!/bin/bash
IP=\$(curl -4s ifconfig.me)
UUID=\$(jq -r '.inbounds[0].settings.clients[0].id' /usr/local/etc/xray/config.json)
PBK=\$(jq -r '.inbounds[0].streamSettings.realitySettings.publicKey // "'$REALITY_PUBLIC_KEY'"' /usr/local/etc/xray/config.json)
SID=\$(jq -r '.inbounds[0].streamSettings.realitySettings.shortIds[0]' /usr/local/etc/xray/config.json)
LINK="vless://\$UUID@\$IP:443?encryption=none&security=reality&fp=safari&pbk=\$PBK&sid=\$SID&sni=icloud.com&type=grpc&serviceName=random&mode=multi&flow=xtls-rprx-vision#PrivateStack-Vision"
echo "🔗 Xray REALITY + Vision (требуется Hiddify 2.5+):"
echo "\$LINK"
echo
echo "📱 QR-код:"
echo "\$LINK" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/mainuser

# vw-url
cat > /usr/local/bin/vw-url <<EOF
#!/bin/bash
URL=\$(journalctl -u cloudflared -n 60 | grep -o 'https://[a-z0-9-]*\.trycloudflare\.com' | head -1)
if [[ -z "\$URL" ]]; then
  echo "⚠️ URL не найден. Перезапуск cloudflared..."
  systemctl restart cloudflared
  sleep 10
  URL=\$(journalctl -u cloudflared -n 60 | grep -o 'https://[a-z0-9-]*\.trycloudflare\.com' | head -1)
  if [[ -z "\$URL" ]]; then
    echo "❌ URL так и не появился. Проверьте journalctl -u cloudflared"
    exit 1
  fi
fi
echo "🔗 Vaultwarden: \$URL"
echo
echo "📱 QR-код:"
echo "\$URL" | qrencode -t ansiutf8
EOF
chmod +x /usr/local/bin/vw-url

# Обновление
cat > /usr/local/bin/private-stack-update <<'EOF'
#!/bin/bash
set -e
log() { echo -e "\033[0;32m[+]\033[0m $1"; }

log "Обновление Xray..."
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install --no-logfiles

log "Обновление SearXNG..."
cd /opt/searxng || exit 1
git pull
export PATH="$HOME/.local/bin:$PATH"
source .venv/bin/activate
uv pip install pyyaml setuptools wheel msgspec
uv pip install --no-build-isolation -e .
systemctl restart searx

log "Обновление Vaultwarden..."
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" ]]; then
    DL_URL="https://github.com/dani-garcia/vaultwarden/releases/latest/download/vaultwarden-linux-x64"
elif [[ "$ARCH" == "aarch64" ]]; then
    DL_URL="https://github.com/dani-garcia/vaultwarden/releases/latest/download/vaultwarden-linux-arm64"
fi
curl -L "$DL_URL" -o /usr/local/bin/vaultwarden
chmod +x /usr/local/bin/vaultwarden
systemctl restart vaultwarden

log "Обновление cloudflared..."
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" ]]; then
    DL_URL="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
elif [[ "$ARCH" == "aarch64" ]]; then
    DL_URL="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
fi
curl -L "$DL_URL" -o /usr/local/bin/cloudflared
chmod +x /usr/local/bin/cloudflared
systemctl restart cloudflared

log "✅ Все компоненты обновлены!"
EOF
chmod +x /usr/local/bin/private-stack-update

# Финал
systemctl restart xray nginx

echo
echo "🎉 Установка завершена!"
echo
echo "🔗 Xray REALITY + Vision (требуется Hiddify 2.5+):"
echo "$REALITY_LINK"
echo
echo "📱 QR-код Xray:"
echo "$REALITY_LINK" | qrencode -t ansiutf8
echo
echo "🔗 Vaultwarden: $VAULTWARDEN_URL"
echo
echo "📱 QR-код Vaultwarden:"
echo "$VAULTWARDEN_URL" | qrencode -t ansiutf8
echo
echo "💡 Команды:"
echo "   - Ссылка Xray: mainuser"
echo "   - Ссылка Vaultwarden: vw-url"
echo "   - Обновление: private-stack-update"
echo "   - SearXNG доступен только через прокси (127.0.0.1:8888)."
